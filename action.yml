name: 'Sync Repo Access'
description: 'Sync Repo Access list with the users listed in a file'
branding:
  icon: "lock"
  color: "orange"
inputs:
  role:
    description: 'Role of the users to update'
    required: true
    default: 'write'
  filename:
    description: 'filename to read users from'
    required: true
    default: 'CONTRIBUTORS'
outputs:
  table-of-updates:
    description: "Table of updates"
    value: ${{steps.run-sync-repo-access.table-of-updates}}
runs:
  using: "composite"
  steps:

    - name: Install RepoHelper
      id: install-repo-helper
      shell: pwsh
      run: |
          # Install RepoHelper module
          $module = Get-Module -ListAvailable -Name RepoHelper
          if ($null -eq $module) {
            Install-Module -Name RepoHelper -Force -AllowPrerelease
          }
          Get-Module -Name RepoHelper -ListAvailable

    - name: Find File
      id: find-file
      shell: pwsh
      env:
        FileName: ${{inputs.fileName}}
      run: |
          # Find CONTRIBUTORS
          $itemPath = $env:FileName
          if($itemPath | Test-Path){
            $item = $itemPath | Get-Item
          }

          $itemPath = ".github" | Join-Path -ChildPath $env:FileName
          if($itemPath | Test-Path){
            $item = $itemPath | Get-Item
          }

          if($null -eq $item){
            throw "Could not find file $env:FileName"
          }

          "Found file $itemPath" | Write-Host

          echo "filePath= $item.FullName" >> $GITHUB_ENV

    - name: Run Sync-RepoAccess
      id: run-sync-repo-access
      shell: pwsh
      env:
        Role: ${{inputs.role}}
      run: |
          Import-Module -Name RepoHelper
          $result = Sync-RepoAccess -role $env:Role -FilePath $env:itemPath -WhatIf
          echo "result= $result" >> $GITHUB_ENV

    - name: Trace Results
      shell: pwsh
      run: |
          $result| Out-String | Write-Host

          # Convert to Json for output parameter
          $resultJson = $result | ConvertTo-Json
          $resultJson | Out-String | Write-Host

          echo "resultJson= $resultJson" >> $GITHUB_ENV
      
    - name: Set Output Parameter
      shell: bash
      run: |
          echo "table-of-updates= $resultJson" >> $GITHUB_OUTPUT

